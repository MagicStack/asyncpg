[project]
name = "asyncpg"
description = "An asyncio PostgreSQL driver"
authors = [{name = "MagicStack Inc", email = "hello@magic.io"}]
requires-python = '>=3.8.0'
readme = "README.rst"
license = {text = "Apache License, Version 2.0"}
dynamic = ["version"]
keywords = [
    "database",
    "postgres",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Database :: Front-Ends",
]
dependencies = [
    'async_timeout>=4.0.3; python_version < "3.12.0"',
]

[project.urls]
github = "https://github.com/MagicStack/asyncpg"

[project.optional-dependencies]
gssauth = [
    'gssapi; platform_system != "Windows"',
    'sspilib; platform_system == "Windows"',
]
test = [
    'flake8~=6.1',
    'flake8-pyi~=24.1.0',
    'uvloop>=0.15.3; platform_system != "Windows" and python_version < "3.14.0"',
    'gssapi; platform_system == "Linux"',
    'k5test; platform_system == "Linux"',
    'sspilib; platform_system == "Windows"',
    'mypy~=1.8.0',
]
docs = [
    'Sphinx~=5.3.0',
    'sphinxcontrib-asyncio~=0.3.0',
    'sphinx_rtd_theme>=1.2.2',
]

[build-system]
requires = [
    "setuptools>=60",
    "wheel",

    "Cython(>=0.29.24,<4.0.0)"
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
include = ["asyncpg", "asyncpg.*"]

[tool.setuptools.exclude-package-data]
"*" = ["*.c", "*.h"]

[tool.cibuildwheel]
build-frontend = "build"
test-extras = "test"

[tool.cibuildwheel.macos]
test-command = "python {project}/tests/__init__.py"

[tool.cibuildwheel.windows]
test-command = "python {project}\\tests\\__init__.py"

[tool.cibuildwheel.linux]
before-all = ".github/workflows/install-postgres.sh"
test-command = """\
    PY=`which python` \
    && chmod -R go+rX "$(dirname $(dirname $(dirname $PY)))" \
    && su -l apgtest -c "$PY {project}/tests/__init__.py" \
    """

[tool.pytest.ini_options]
addopts = "--capture=no --assert=plain --strict-markers --tb=native --import-mode=importlib"
testpaths = "tests"
filterwarnings = "default"

[tool.coverage.run]
branch = true
plugins = ["Cython.Coverage"]
parallel = true
source = ["asyncpg/", "tests/"]
omit = ["*.pxd"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if debug",
    "raise NotImplementedError",
    "if __name__ == .__main__.",
]
show_missing = true

[tool.mypy]
incremental = true
strict = true
implicit_reexport = true

[[tool.mypy.overrides]]
module = [
    "asyncpg._testbase",
    "asyncpg._testbase.*",
    "asyncpg.cluster",
    "asyncpg.connect_utils",
    "asyncpg.connection",
    "asyncpg.connresource",
    "asyncpg.cursor",
    "asyncpg.exceptions",
    "asyncpg.exceptions.*",
    "asyncpg.pool",
    "asyncpg.prepared_stmt",
    "asyncpg.transaction",
    "asyncpg.utils",
]
ignore_errors = true
